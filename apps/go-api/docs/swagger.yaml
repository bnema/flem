basePath: /api/v1
definitions:
  types.Error:
    properties:
      message:
        type: string
    type: object
  types.Genre:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  types.Movie:
    properties:
      adult:
        type: boolean
      backdrop_path:
        type: string
      belongs_to_collection: {}
      budget:
        type: integer
      director:
        type: string
      genres:
        items:
          $ref: '#/definitions/types.Genre'
        type: array
      homepage:
        type: string
      id:
        type: string
      imdb_id:
        type: string
      language:
        type: string
      original_language:
        type: string
      original_title:
        type: string
      overview:
        type: string
      popularity:
        type: number
      poster_path:
        type: string
      production_companies:
        items:
          $ref: '#/definitions/types.ProductionCompany'
        type: array
      production_countries:
        items:
          $ref: '#/definitions/types.ProductionCountry'
        type: array
      release_date:
        type: string
      revenue:
        type: integer
      runtime:
        type: integer
      spoken_languages:
        items:
          $ref: '#/definitions/types.SpokenLanguage'
        type: array
      status:
        type: string
      tagline:
        type: string
      title:
        type: string
      tmdb_id:
        type: integer
      video:
        type: boolean
      vote_average:
        type: number
      vote_count:
        type: integer
    type: object
  types.PocketBaseUserRecord:
    properties:
      avatar:
        type: string
      collectionId:
        type: string
      collectionName:
        type: string
      created:
        type: string
      email:
        type: string
      emailVisibility:
        type: boolean
      id:
        type: string
      name:
        type: string
      updated:
        type: string
      username:
        type: string
      verified:
        type: boolean
    type: object
  types.ProductionCompany:
    properties:
      id:
        type: integer
      logo_path:
        type: string
      name:
        type: string
      origin_country:
        type: string
    type: object
  types.ProductionCountry:
    properties:
      iso_3166_1:
        type: string
      name:
        type: string
    type: object
  types.SpokenLanguage:
    properties:
      english_name:
        type: string
      iso_639_1:
        type: string
      name:
        type: string
    type: object
  types.UserHasMovies:
    properties:
      favorited:
        type: boolean
      id:
        type: string
      liked:
        type: boolean
      movie:
        description: Relation to Movie record
        type: string
      rating:
        type: number
      review:
        type: string
      shared:
        type: boolean
      suggested:
        type: boolean
      user:
        description: Relation to User record
        type: string
      watched:
        type: boolean
    type: object
info:
  contact: {}
paths:
  /login:
    get:
      consumes:
      - application/json
      description: This route handles the '/login' endpoint and initiates OAuth authentication
      parameters:
      - description: OAuth provider name
        in: query
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: Redirection to the OAuth URL
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Initiate OAuth authentication
      tags:
      - OAuth
  /movies:
    get:
      consumes:
      - application/json
      description: This API retrieves a list of movies from movie collection
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched movie collection
          schema:
            items:
              $ref: '#/definitions/types.Movie'
            type: array
        "500":
          description: Internal server error - Failed to get token or movies collection
          schema:
            $ref: '#/definitions/types.Error'
      security:
      - HTTPOnlySessionCookie: []
      summary: Get list of movies from movie collection
      tags:
      - Movies
  /oauth-redirect:
    get:
      consumes:
      - application/json
      description: This route handles the '/oauth-redirect' endpoint and finalizes
        the OAuth authentication process. After successful authentication, the session
        is updated with a token and a userId.
      parameters:
      - description: OAuth code received from provider
        in: query
        name: code
        required: true
        type: string
      - description: OAuth state received from provider
        in: query
        name: state
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Finalize OAuth authentication
      tags:
      - OAuth
  /openai/movies:
    post:
      consumes:
      - application/json
      description: This API receives a list of favorite movie IDs, fetches the corresponding
        movie summaries,
      parameters:
      - description: A list of favorite movie IDs
        in: body
        name: movies
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of movie suggestions
          schema:
            items:
              $ref: '#/definitions/types.Movie'
            type: array
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/types.Error'
        "500":
          description: Failed to get movie summaries or suggestions
          schema:
            $ref: '#/definitions/types.Error'
      security:
      - HTTPOnlySessionCookie: []
      summary: Get movie suggestions based on favorite movies
      tags:
      - OpenAI
  /openai/translate:
    post:
      consumes:
      - application/json
      description: This API receives a list of movie IDs and translates the corresponding
        movie information to the specified language.
      parameters:
      - description: The language to translate to
        in: query
        name: lang
        required: true
        type: string
      - description: A list of movie IDs
        in: body
        name: movies
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Successful translation of movies
          schema:
            items:
              $ref: '#/definitions/types.Movie'
            type: array
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/types.Error'
        "500":
          description: Failed to get movie with ID
          schema:
            $ref: '#/definitions/types.Error'
      security:
      - HTTPOnlySessionCookie: []
      summary: Translate movies to a specified language
      tags:
      - OpenAI
  /tmdb/movies:
    get:
      consumes:
      - application/json
      description: Get movies that match the specified genre and were released in
        a specific year
      operationId: get-movies-by-genre-date
      parameters:
      - description: Genre ID
        in: query
        name: genre
        required: true
        type: string
      - description: Release Year
        in: query
        name: year
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Movie'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get movies by genre and release date
      tags:
      - TMDB
  /tmdb/movies/post/ids:
    post:
      consumes:
      - application/json
      description: Get movies with given IDs
      operationId: get-movies-by-ids
      parameters:
      - description: List of Movie IDs
        in: body
        name: ids
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Movie'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get movies by IDs
      tags:
      - TMDB
  /tmdb/movies/post/title:
    post:
      consumes:
      - application/json
      description: Get movies that match given titles
      operationId: get-movies-by-title
      parameters:
      - description: List of Titles
        in: body
        name: titles
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Movie'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.Error'
      summary: Search movies by title
      tags:
      - TMDB
  /tmdb/movies/random10:
    get:
      consumes:
      - application/json
      description: Get 10 random popular movies
      operationId: get-random-movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Movie'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.Error'
      summary: Get random popular movies
      tags:
      - TMDB
  /user/movie/preferences:
    get:
      consumes:
      - application/json
      description: This API retrieves a user's movie preferences from user_has_movies
        collection
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched user's movie preferences
          schema:
            $ref: '#/definitions/types.UserHasMovies'
        "400":
          description: Bad request - No userId or token in session
          schema:
            $ref: '#/definitions/types.Error'
        "500":
          description: Internal server error - Failed to get user's movie preferences
          schema:
            $ref: '#/definitions/types.Error'
      security:
      - HTTPOnlySessionCookie: []
      summary: Get user's movie preferences
      tags:
      - User
    post:
      consumes:
      - application/json
      description: This API creates a new record in the user_has_movies collection
      parameters:
      - description: User's movie preferences
        in: body
        name: userHasMovies
        required: true
        schema:
          $ref: '#/definitions/types.UserHasMovies'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created user's movie preferences
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request - No userId or token in session, Failed to parse
            request body
          schema:
            $ref: '#/definitions/types.Error'
        "500":
          description: Internal server error - Failed to update user's movie preferences
          schema:
            $ref: '#/definitions/types.Error'
      security:
      - HTTPOnlySessionCookie: []
      summary: Create new user's movie preferences
      tags:
      - User
  /whoami:
    get:
      consumes:
      - application/json
      description: This API retrieves information about the currently authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched user data
          schema:
            $ref: '#/definitions/types.PocketBaseUserRecord'
        "400":
          description: Invalid request - No userId or token in session
          schema:
            $ref: '#/definitions/types.Error'
        "500":
          description: Internal server error - Failed to get user from PocketBase
          schema:
            $ref: '#/definitions/types.Error'
      security:
      - HTTPOnlySessionCookie: []
      summary: Get current user information
      tags:
      - User
swagger: "2.0"
